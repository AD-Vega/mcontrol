motor:
{
   // Minimum and maximum PWM duty cycles.
   minDuty = 15
   maxDuty = 30

   // Change this if the motor spins in the wrong direction.
   invertPolarity = false

   // Report stall condition if the axis rotates less than stallThreshold
   // degrees in stallCheckPeriod milliseconds.
   stallCheckPeriod = 3000
   stallThreshold = 1.0
}

angles:
{
   // Linearization is the first operation applied to the measured raw
   // angles (i.e., the values obtained directly from the sensor). It is
   // performed according to the formula
   //
   // linearized = raw - k(1,1)*cos(1*raw) - k(1,2)*sin(1*raw)
   //                  - k(2,1)*cos(2*raw) - k(2,2)*sin(2*raw)
   //                  - ...
   //
   // The setting below specifies the coefficients k(N,M):
   //
   // linearization = [ k(1,1) k(1,2) k(2,1) k(2,2) k(3,1) k(3,2) ... ]
   //
   // The array must contain an even number of coefficients. An empty array
   // is allowed and no linearization is done in that case.
   linearization = [ ]

   // Minimum and maximum raw angles that can be reached. Enter here the raw
   // sensor readouts at the points where the end switches engage. The final
   // (user defind) angle scale will be oriented so that the angles will
   // increase when slewing from rawAngleAtMinimum towards rawAngleAtMaximum
   // along the longer of the two possible paths.
   rawAngleAtMinimum = 230;
   rawAngleAtMaximum = 190;

   // How close to approach the end switch positions (in degrees). This
   // ensures that the end switches never engage during normal operation.
   endGuard = 5;

   // Set up the user angle scale so that when the sensor reads the raw
   // value "userOriginPoint", the user scale shows "userOriginValue".
   userOriginPoint = 250;
   userOriginValue = 0;
}

movement:
{
   // Angle over which the motor accelerates to maximum set speed.
   accelAngle = 20.0

   // Stop the motion when the absolute difference between the current and
   // target angle drops below this value (in degrees). Results depend on
   // the motor overshoot and on the amount of sensor noise. Experiment to
   // see what works best.
   tolerance = 0.1
}
