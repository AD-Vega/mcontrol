motor:
{
   // Minimum and maximum PWM duty cycles.
   minDuty = 15
   maxDuty = 30

   // Change this if the motor spins in the wrong direction.
   invertPolarity = false

   // Report stall condition if the axis rotates less than stallThreshold
   // degrees in stallCheckPeriod milliseconds.
   stallCheckPeriod = 3000
   stallThreshold = 1.0
}

sensor:
{
   // Change this if the raw angles increase in the wrong direction.
   invert = false
}

angles:
{
   // Linearization is the first operation applied to the measured raw
   // angles (i.e., the values obtained directly from the sensor). It is
   // performed according to the formula
   //
   // linearized = raw - k(1,1)*cos(1*raw) - k(1,2)*sin(1*raw)
   //                  - k(2,1)*cos(2*raw) - k(2,2)*sin(2*raw)
   //                  - ...
   //
   // The setting below specifies the coefficients k(N,M):
   //
   // linearization = [ k(1,1) k(1,2) k(2,1) k(2,2) k(3,1) k(3,2) ... ]
   //
   // The array must contain an even number of coefficients. An empty array
   // is allowed and no linearization is done in that case.
   linearization = [ ]
   
   // A value of the raw angle that is never reached due to hardware
   // restrictions. Set this to approximately the midpoint of the
   // inaccessible range. E.g., if the angles between 120 and 160 (as seen
   // by the sensor) are not accessible, set this to 140.
   hardwareOrigin_raw = 230

   // Origin (zero point) of the user angle scale. This value is a "cooked
   // angle", i.e., the linearized and shifted angle as reported by the
   // program's -c flag. Set the axis to the position that you consider an
   // appropriate origin, query the cooked angle using the -c flag and set
   // this parameter to the returned value.
   userOrigin_cooked = 20
}

movement:
{
   // Angle over which the motor accelerates to maximum set speed.
   accelAngle = 20.0

   // Minimum and maximum safe angles. Set this to a few degrees before the
   // end-switches engage. Values are "cooked angles" (see above).
   minSafeAngle_cooked = 335
   maxSafeAngle_cooked = 315
   
   // Stop the motion when the absolute difference between the current and
   // target angle drops below this value (in degrees). Results depend on
   // the motor overshoot and on the amount of sensor noise. Experiment to
   // see what works best.
   tolerance = 0.1
}
